#!/bin/bash
cat << EOF
Welcome to bcplus. It's a tiny extension that adds extra functionality.

CURRENTLY DOES NOT SUPPORT MULTI-LETTER VARIABLE

Designed by TrainFanatic

For further help, type bcplus help
EOF

#initialising----
##define checkparams for init
function checkparams {
#in this, $1 will be arg to check for in bcplus given params, and $2 will be variable to write 'true' to
if [ $(echo $@ | grep $1) ]
then 
export "$2"="true"
echo "param $1 found, activating..."
else
echo "param $1 not found"
fi
}
##define variable rules
export vars
checkparams help info #info/help page
#checkparams --- ---


##define checknums (it checks for anything not number, needed for detecting variables)

function checknum {

for i in 1 2 3 4 5 6 7 8 9 0
do
if [ ! $(echo $1 | grep $i) ]
then
result='var'
varname=$1
#insert recursive function that checks for letter until it isn't and the name of the variable is all of the letters.
fi
done
if [ ! $result == 'var' ]
then
result='num'
fi

##define pos (finds character at certain position)
function pos {
echo $1 | head -c"$2" | tail -c1
}
##define askinit {
echo "Variable of 1 length detected! Initialise variable $varname""? (y/n)"
read initialiseq
if [ ! $initialiseq == 'y' -o ! $initialiseq == 'n' ]
then
echo "Response wasn't y or n. Please input again"
askinit
else
newvar=$(pos $input $i)
newvarval=$(echo "$input;$newvar" | bc)
fi
}
##define checkvars
function checkvars {
if [ $(echo $vars | grep $1) ]
then
exist='y' #means yes, it does exist
elif [ ! $(echo $vars | grep $1) ]
then
exist='n'
else
echo "Something went wrong with subprocess checkvars"
fi
#end of initialising

#start of misc eg help
if [ $help == "true" ]
then
cat << EOL
bcplus help

BCPLUS OVERVIEW---

bcplus is a simple extension to GNU bc that just adds some extra functionality

Currently, it adds:

  - Extra variable functionality (a+a=2a, a*a=a^2 etc..)

BCPLUS OPTIONS/PARAMETERS

bcplus help - opens this help page
bcplus force FUNCTION - forces FUNCTION to always be active. This is not yet implemented and is in the testing stage

Made by TrainFanatic
end
EOL
fi

#start of code

read input
length=${#input}

for i in $(seq 1 1 $length)
do
checkvars $i
checknum $(pos $input $i) #finds character at $i position of input and checks if it is a character
if [ $result == 'var' -a exist == "n" ]
askinit
elif [ exist == "y" ]
then
echo "Detected variable $i but is already in database"
done
if [ $initialiseq == "y" ]
then
vars="$newvar = $newvarval"":""$vars"

echo $vars


